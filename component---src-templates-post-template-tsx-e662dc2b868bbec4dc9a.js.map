{"version":3,"file":"component---src-templates-post-template-tsx-e662dc2b868bbec4dc9a.js","mappings":"8NASA,IAAMA,GAAmB,kMAYnBC,GAAK,+SAiBLC,GAAQ,sOA8Bd,EAhB2D,YAIvD,IAHFC,EAGC,EAHDA,MACAC,EAEC,EAFDA,KACAC,EACC,EADDA,WAEA,OACE,QAACL,EAAD,MACE,QAACC,EAAD,KAAQE,IACR,QAACD,EAAD,MACE,iBAAIG,EAAWC,KAAK,OACpB,iBAAIF,MCxDZ,IAAMG,GAAe,sGAkBrB,EAZmD,YAI/C,IAHFJ,EAGC,EAHDA,MACAC,EAEC,EAFDA,KACAC,EACC,EADDA,WAEA,OACE,QAACE,EAAD,MACE,QAAC,EAAD,CAAcJ,MAAOA,EAAOC,KAAMA,EAAMC,WAAYA,MCZ1D,IAAMG,GAAgB,g+BA+HtB,EAJyD,YAAqB,IAATC,EAAQ,EAARA,KACnE,OAAO,QAACD,EAAD,CAAkBE,wBAAyB,CAAEC,OAAQF,MChI9D,IAaMG,GAAiB,wGAkCvB,EA5ByC,WACvC,IAAMC,GAAUC,EAAAA,EAAAA,aAwBhB,OAtBAC,EAAAA,EAAAA,YAAU,WACR,GAAwB,OAApBF,EAAQG,QAAZ,CAEA,IAAMC,EAAgCC,SAASC,cAAc,UAEvDC,EAAuC,CAC3CC,IA5BM,gCA6BNC,KA5BO,sCA6BP,aAAc,WACdC,MAAO,UACPC,MAAM,eACNC,YAAa,YACbC,MAAO,QAGTC,OAAOC,QAAQR,GAAYS,SAAQ,YAAmB,IAAjBC,EAAgB,KAAXC,EAAW,KACnDd,EAAWe,aAAaF,EAAKC,MAG/BlB,EAAQG,QAAQiB,YAAYhB,MAC3B,KAEI,QAACL,EAAD,CAAmBsB,IAAKrB,KCvCjC,IAAMsB,GAAY,8IASL,qBAAGC,OAAuB,KAAO,UAT5B,kEAgBZC,GAAG,mFAgBT,EAXiE,YAG7D,IAFFC,EAEC,EAFDA,gBACAF,EACC,EADDA,OAEA,OACE,QAACD,EAAD,CAAcC,OAAQA,IACpB,QAACC,EAAD,CAAK3B,wBAAyB,CAAEC,OAAQ2B,OCd9C,IAAMC,GAAe,gGA0CrB,EArC2D,YAKvD,IAHqBC,EAGtB,EAJDC,KACEC,kBAAqBF,MAEXG,EACX,EADDC,SAAYD,KAEZ,EAMIH,EAAM,GALRK,KACEpC,EAFJ,EAEIA,KACA6B,EAHJ,EAGIA,gBAHJ,IAIIQ,YAAe3C,EAJnB,EAImBA,MAAO4C,EAJ1B,EAI0BA,QAAS3C,EAJnC,EAImCA,KAAMC,EAJzC,EAIyCA,WAIzC,GAA0B2C,EAAAA,EAAAA,WAAkB,GAArCZ,EAAP,KAAea,EAAf,KAKA,OACE,QAACC,EAAA,EAAD,CACE/C,MAAOA,EACPgD,YAAaJ,EACbK,IAAKT,EACLU,WATe,WACjBJ,GAASb,IASPA,OAAQA,IAER,QAACG,EAAD,MACE,QAAC,EAAD,CAAUpC,MAAOA,EAAOC,KAAMA,EAAMC,WAAYA,KAChD,QAAC,EAAD,CAAaI,KAAMA,KACnB,QAAC,EAAD,QAEF,QAAC,EAAD,CAAiB6B,gBAAiBA,EAAiBF,OAAQA","sources":["webpack://gatsby-starter-default/./src/components/Post/PostHeadInfo.tsx","webpack://gatsby-starter-default/./src/components/Post/PostHead.tsx","webpack://gatsby-starter-default/./src/components/Post/PostContent.tsx","webpack://gatsby-starter-default/./src/components/Post/CommentWidget.tsx","webpack://gatsby-starter-default/./src/components/Post/TableOfContents.tsx","webpack://gatsby-starter-default/./src/templates/post_template.tsx"],"sourcesContent":["import React, { FunctionComponent } from 'react'\nimport styled from '@emotion/styled'\n\nexport type PostHeadInfoProps = {\n  title: string\n  date: string\n  categories: string[]\n}\n\nconst PostHeadInfoWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  width: 768px;\n  margin: 0 auto;\n  padding: 60px 0;\n\n  @media (max-width: 768px) {\n    width: 100%;\n    padding: 40px 20px;\n  }\n`\nconst Title = styled.div`\n  display: -webkit-box;\n  overflow: hidden;\n  overflow-wrap: break-word;\n  margin-top: auto;\n  text-overflow: ellipsis;\n  white-space: normal;\n  -webkit-line-clamp: 2;\n  -webkit-box-orient: vertical;\n  font-size: 45px;\n  font-weight: 800;\n\n  @media (max-width: 768px) {\n    font-size: 30px;\n  }\n`\n\nconst PostData = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-top: 10px;\n  font-size: 18px;\n  font-weight: 700;\n\n  @media (max-width: 768px) {\n    font-size: 15px;\n    font-weight: 400;\n  }\n`\n\nconst PostHeadInfo: FunctionComponent<PostHeadInfoProps> = function ({\n  title,\n  date,\n  categories,\n}) {\n  return (\n    <PostHeadInfoWrapper>\n      <Title>{title}</Title>\n      <PostData>\n        <p>{categories.join('/')}</p>\n        <p>{date}</p>\n      </PostData>\n    </PostHeadInfoWrapper>\n  )\n}\n\nexport default PostHeadInfo\n","import React, { FunctionComponent } from 'react'\nimport styled from '@emotion/styled'\nimport PostHeadInfo, { PostHeadInfoProps } from './PostHeadInfo'\n\ntype PostHeadProps = PostHeadInfoProps\n\nconst PostHeadWrapper = styled.div`\n  positon: relative;\n  width: 100%;\n  height: 100px;\n`\n\nconst PostHead: FunctionComponent<PostHeadProps> = function ({\n  title,\n  date,\n  categories,\n}) {\n  return (\n    <PostHeadWrapper>\n      <PostHeadInfo title={title} date={date} categories={categories} />\n    </PostHeadWrapper>\n  )\n}\n\nexport default PostHead\n","import React, { FunctionComponent } from 'react'\nimport styled from '@emotion/styled'\n\ninterface PostContentProps {\n  html: string\n}\n\nconst MarkdownRenderer = styled.div`\n  // Renderer Style\n  display: flex;\n  flex-direction: column;\n  width: 768px;\n  margin: 0 auto;\n  padding: 100px 0;\n  word-break: break-all;\n\n  // Markdown Style\n  line-height: 1.8;\n  font-size: 16px;\n  font-weight: 400;\n\n  // Apply Padding Attribute to All Elements\n  p {\n    padding: 3px 0;\n  }\n\n  // Adjust Heading Element Style\n  h1,\n  h2,\n  h3 {\n    font-weight: 800;\n    margin-bottom: 30px;\n  }\n\n  * + h1,\n  * + h2,\n  * + h3 {\n    margin-top: 80px;\n  }\n\n  hr + h1,\n  hr + h2,\n  hr + h3 {\n    margin-top: 0;\n  }\n\n  h1 {\n    font-size: 30px;\n  }\n\n  h2 {\n    font-size: 25px;\n  }\n\n  h3 {\n    font-size: 20px;\n  }\n\n  // Adjust Quotation Element Style\n  blockquote {\n    margin: 30px 0;\n    padding: 5px 15px;\n    border-left: 2px solid #000000;\n    font-weight: 800;\n  }\n\n  // Adjust List Element Style\n  ol,\n  ul {\n    margin-left: 20px;\n    padding: 30px 0;\n  }\n\n  // Adjust Horizontal Rule style\n  hr {\n    border: 1px solid #000000;\n    margin: 100px 0;\n  }\n\n  // Adjust Link Element Style\n  a {\n    color: #4263eb;\n    text-decoration: underline;\n  }\n\n  // Adjust Code Style\n  pre[class*='language-'] {\n    margin: 30px 0;\n    padding: 15px;\n    font-size: 15px;\n\n    ::-webkit-scrollbar-thumb {\n      background: rgba(255, 255, 255, 0.5);\n      border-radius: 3px;\n    }\n  }\n\n  code[class*='language-'],\n  pre[class*='language-'] {\n    tab-size: 2;\n  }\n\n  @media (max-width: 768px) {\n    width: 100%;\n    padding: 80px 20px;\n    line-height: 1.6;\n    font-size: 14px;\n\n    h1 {\n      font-size: 23px;\n    }\n\n    h2 {\n      font-size: 20px;\n    }\n\n    h3 {\n      font-size: 17px;\n    }\n\n    img {\n      width: 100%;\n    }\n\n    hr {\n      margin: 50px 0;\n    }\n  }\n`\n\nconst PostContent: FunctionComponent<PostContentProps> = function ({ html }) {\n  return <MarkdownRenderer dangerouslySetInnerHTML={{ __html: html }} />\n}\n\nexport default PostContent\n","import React, { createRef, FunctionComponent, useEffect } from 'react'\nimport styled from '@emotion/styled'\n\nconst src = 'https://utteranc.es/client.js'\nconst repo = 'HyungjunJeon/HyungjunJeon-gitbub.io'\n\ntype UtterancesAttributesType = {\n  src: string\n  repo: string\n  'issue-term': string\n  label: string\n  theme: string\n  crossorigin: string\n  async: string\n}\n\nconst UtterancesWrapper = styled.div`\n  @media (max-width: 768px) {\n    padding: 0 20px;\n  }\n`\n\nconst CommentWidget: FunctionComponent = function () {\n  const element = createRef<HTMLDivElement>()\n\n  useEffect(() => {\n    if (element.current === null) return\n\n    const utterances: HTMLScriptElement = document.createElement('script')\n\n    const attributes: UtterancesAttributesType = {\n      src,\n      repo,\n      'issue-term': 'pathname',\n      label: 'Comment',\n      theme: `github-light`,\n      crossorigin: 'anonymous',\n      async: 'true',\n    }\n\n    Object.entries(attributes).forEach(([key, value]) => {\n      utterances.setAttribute(key, value)\n    })\n\n    element.current.appendChild(utterances)\n  }, [])\n\n  return <UtterancesWrapper ref={element} />\n}\n\nexport default CommentWidget\n","import React, { FunctionComponent } from 'react'\nimport styled from '@emotion/styled'\n\nexport type TableOfContentsProps = {\n  tableOfContents: string\n  isOpen: boolean\n}\n\nconst TocContainer = styled.div<{ isOpen: boolean }>`\n  position: absolute;\n  top: 150px;\n  right: 150px;\n\n  @media (max-width: 768px) {\n    width: 100%;\n    height: 100%;\n    top: 96px;\n    right: ${({ isOpen }) => (isOpen ? '0%' : '-100%')};\n    background: #ffffff;\n    padding: 20px;\n    transition: all ease-in 0.3s;\n  }\n`\n\nconst Toc = styled.div`\n  width: 100%;\n  height: 100%;\n`\n\nconst TableOfContents: FunctionComponent<TableOfContentsProps> = function ({\n  tableOfContents,\n  isOpen,\n}) {\n  return (\n    <TocContainer isOpen={isOpen}>\n      <Toc dangerouslySetInnerHTML={{ __html: tableOfContents }}></Toc>\n    </TocContainer>\n  )\n}\n\nexport default TableOfContents\n","import React, { FunctionComponent, useState } from 'react'\nimport styled from '@emotion/styled'\nimport { graphql } from 'gatsby'\nimport { PostPageItemType } from 'types/PostItem.types'\nimport Template from 'components/Common/Template'\nimport PostHead from 'components/Post/PostHead'\nimport PostContent from 'components/Post/PostContent'\nimport CommentWidget from 'components/Post/CommentWidget'\nimport TableOfContents from 'components/Post/TableOfContents'\n\ntype PostTemplateProps = {\n  data: {\n    allMarkdownRemark: {\n      edges: PostPageItemType[]\n    }\n  }\n  location: {\n    href: string\n  }\n}\n\nconst PostPageWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n`\n\nconst PostTemplate: FunctionComponent<PostTemplateProps> = function ({\n  data: {\n    allMarkdownRemark: { edges },\n  },\n  location: { href },\n}) {\n  const {\n    node: {\n      html,\n      tableOfContents,\n      frontmatter: { title, summary, date, categories },\n    },\n  } = edges[0]\n\n  const [isOpen, setMenu] = useState<boolean>(false)\n  const toggleMenu = () => {\n    setMenu(!isOpen)\n  }\n\n  return (\n    <Template\n      title={title}\n      description={summary}\n      url={href}\n      toggleMenu={toggleMenu}\n      isOpen={isOpen}\n    >\n      <PostPageWrapper>\n        <PostHead title={title} date={date} categories={categories} />\n        <PostContent html={html} />\n        <CommentWidget />\n      </PostPageWrapper>\n      <TableOfContents tableOfContents={tableOfContents} isOpen={isOpen} />\n    </Template>\n  )\n}\n\nexport default PostTemplate\n\nexport const queryMarkdownDataBySlug = graphql`\n  query queryMarkdownDataBySlug($slug: String) {\n    allMarkdownRemark(filter: { fields: { slug: { eq: $slug } } }) {\n      edges {\n        node {\n          html\n          tableOfContents\n          frontmatter {\n            title\n            summary\n            date(formatString: \"YYYY.MM.DD.\")\n            categories\n          }\n        }\n      }\n    }\n  }\n`\n"],"names":["PostHeadInfoWrapper","Title","PostData","title","date","categories","join","PostHeadWrapper","MarkdownRenderer","html","dangerouslySetInnerHTML","__html","UtterancesWrapper","element","createRef","useEffect","current","utterances","document","createElement","attributes","src","repo","label","theme","crossorigin","async","Object","entries","forEach","key","value","setAttribute","appendChild","ref","TocContainer","isOpen","Toc","tableOfContents","PostPageWrapper","edges","data","allMarkdownRemark","href","location","node","frontmatter","summary","useState","setMenu","Template","description","url","toggleMenu"],"sourceRoot":""}